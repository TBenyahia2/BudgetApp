package com.luv2code.web.jdbc;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

public class StudentDbUtil {
	
	private DataSource dataSource;

	public StudentDbUtil(DataSource theDataSource) {
		dataSource = theDataSource;
	} //end Constructor
	
	public List<Student> getStudents() throws Exception {
		
		List<Student> students = new ArrayList<>();
		Connection myConn = null;
		Statement myStmt = null;
		ResultSet myRs = null;
		
		try {
			//get a connection
			myConn = dataSource.getConnection();
			
			//create sql statement
			String sql = "Select * from student order by last_name";
			myStmt = myConn.createStatement();
			
			//execute query
			myRs = myStmt.executeQuery(sql);
			
			//process results set
			while (myRs.next()) {
				
				//Retrieve data from result set row
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				//create new student object
				Student tempStudent = new Student(id, firstName, lastName, email);
				
				//add it to list of students
				students.add(tempStudent);
			} //end while			
			
			return students;
		}
		finally {
			//close JDBC objects - Good habit to clean up after yourself(no memory leaks)
			close(myConn, myStmt, myRs);
		} //end finally
	} //end getStudents()

	//close() method to prevent memory leaks and resource problems over time
	private void close(Connection myConn, Statement myStmt, ResultSet myRs) {
		
		try {
			if (myRs != null) {
				myRs.close();
			}
			if (myStmt != null) {
				myStmt.close();
			}
			if (myConn != null) {
				myConn.close(); //Not a true close ... puts back into available connection pool to
			}  					// 		make connection available for next use
		} //end try
		catch (Exception exc) {
			exc.printStackTrace();
		} //end catch
	} //end close()
 
} //end class StudentDbUtil
